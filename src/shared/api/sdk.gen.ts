// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { PostApiAuthData, PostApiAuthResponse, GetApiGameLatestData, GetApiGameLatestResponse, GetApiTreasuryBalanceData, GetApiTreasuryBalanceResponse, PostApiTreasuryResetNotificationsData, GetApiUserScoreboardData, GetApiUserScoreboardResponse, GetApiUserPigsRecordData, GetApiUserPigsRecordResponse, GetApiUserData, GetApiUserResponse, PutApiUserData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postApiAuth = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAuthResponse, unknown, ThrowOnError>({
        responseType: 'text',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiGameLatest = <ThrowOnError extends boolean = false>(options?: Options<GetApiGameLatestData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiGameLatestResponse, unknown, ThrowOnError>({
        responseType: 'text',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Game/latest',
        ...options
    });
};

export const getApiTreasuryBalance = <ThrowOnError extends boolean = false>(options?: Options<GetApiTreasuryBalanceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiTreasuryBalanceResponse, unknown, ThrowOnError>({
        responseType: 'text',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Treasury/balance',
        ...options
    });
};

export const postApiTreasuryResetNotifications = <ThrowOnError extends boolean = false>(options?: Options<PostApiTreasuryResetNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Treasury/reset-notifications',
        ...options
    });
};

export const getApiUserScoreboard = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserScoreboardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUserScoreboardResponse, unknown, ThrowOnError>({
        responseType: 'text',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/User/scoreboard',
        ...options
    });
};

export const getApiUserPigsRecord = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserPigsRecordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUserPigsRecordResponse, unknown, ThrowOnError>({
        responseType: 'text',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/User/pigs-record',
        ...options
    });
};

export const getApiUser = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUserResponse, unknown, ThrowOnError>({
        responseType: 'text',
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/User',
        ...options
    });
};

export const putApiUser = <ThrowOnError extends boolean = false>(options?: Options<PutApiUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/User',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};